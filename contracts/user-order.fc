;; User Order Smart Contract

#include "imports/stdlib.fc";
#include "imports/op-codes.fc";
#pragma version >=0.2.0;

const min_tons_for_storage = 10000000; ;; 0.01 TON
const gas_consumption = 10000000; ;; 0.01 TON

;; storage:
;; creator address
;; master contract address
;; orders dict

(slice, slice, cell) load_data() inline {
    slice ds = get_data().begin_parse();
    return (ds~load_msg_addr(), ds~load_msg_addr(), ds~load_dict());
}

() save_data (slice owner, slice master_contract, cell orders) impure inline {
    set_data(begin_cell()
        .store_slice(owner)
        .store_slice(master_contract)
        .store_dict(orders)
        .end_cell());
}

() send_jettons (slice wallet_address, slice to_address, int jetton_amount, int query_id) impure {
    var msg_body = begin_cell()
        .store_uint(op::transfer(), 32)
        .store_uint(query_id, 64)
        .store_coins(jetton_amount)
        .store_slice(to_address)
        .store_slice(to_address)
        .store_uint(0, 1)
        .store_coins(0)
        .store_uint(0, 1)
        .end_cell();
    var msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(wallet_address)
        .store_coins(50000000)
        .store_uint(1, 107)
        .store_ref(msg_body)
        .end_cell();
    send_raw_message(msg, 1); ;; revert on errors
}

() create_jetton_order (slice from_jetton_addr, int from_amount, slice to_jetton_addr, int to_amount) impure {
    (slice owner, slice master_contract, cell orders) = load_data();
    cell new_order = begin_cell()
                        .store_slice(from_jetton_addr)
                        .store_uint(from_amount, 64)
                        .store_slice(to_jetton_addr)
                        .store_uint(to_amount, 64)
                    .end_cell();
    randomize_lt();
    int new_order_id = random();
    orders~udict_set_ref(256, new_order_id, new_order);
    save_data(owner, master_contract, orders);
}

() execute_order (slice executor_address, slice jetton_address, int jetton_amount, int order_id, int query_id) impure {
    (slice owner, slice master_contract, cell orders) = load_data();
    (cell order, int ok) = udict_get_ref?(orders, 256, order_id);
    throw_unless(404, ok == -1);

    slice order_cs = order.begin_parse();
    slice order_from_address = order_cs~load_msg_addr();
    int order_from_amount = order_cs~load_uint(64);
    slice order_to_address = order_cs~load_msg_addr();
    int order_to_amount = order_cs~load_uint(64);

    throw_unless(405, equal_slices(order_to_address, jetton_address));
    throw_unless(406, order_to_amount <= jetton_amount);

    ;; send tokens to order creator
    send_jettons(order_to_address, owner, order_to_amount, query_id);
    ;; send order tokens to executor + reward
    send_jettons(order_from_address, executor_address, order_from_amount, query_id);

    orders~udict_delete?(256, order_id);
    save_data(owner, master_contract, orders);
}

() on_bounce (slice in_msg_body) impure {

}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) {
        on_bounce(in_msg_body);
        return ();
    }
    slice sender_address = cs~load_msg_addr();
    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    if (op == "create_order"c) {
        ;; create_jetton_order(in_msg_body, sender_address, msg_value);
        return ();
    }

    if (op == op::transfer_notification()) {
;; ~strdump("user order. receive transfer notification");
        (int jetton_amount, slice from_address) = (in_msg_body~load_coins(), in_msg_body~load_msg_addr());
        cell fwd_msg = in_msg_body~load_ref();
        slice fwd_cs = fwd_msg.begin_parse();
        int fwd_op = fwd_cs~load_uint(32);
        int fwd_query_id = fwd_cs~load_uint(64);

        if (fwd_op == "create_order"c) {
;; ~strdump("user order. create new order");
            slice to_jetton_addr = fwd_cs~load_msg_addr();
            int to_amount = fwd_cs~load_uint(64);
            create_jetton_order(sender_address, jetton_amount, to_jetton_addr, to_amount);
        }

        if (fwd_op == "execute_order"c) {
;; ~strdump("user order. execute order");
            int order_id = fwd_cs~load_uint(256);
            execute_order(from_address, sender_address, jetton_amount, order_id, fwd_query_id);
        }

        return ();
    }

    throw(0xffff);
}

(cell) get_orders_data() method_id {
    (_, _, cell orders) = load_data();
    return orders;
}